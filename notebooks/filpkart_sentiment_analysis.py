# -*- coding: utf-8 -*-
"""Filpkart_Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lw9Qo-XspyLl5OPcV4bajLW1saf8AHJA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

path = r'/content/drive/MyDrive/Colab Notebooks/data/reviews_badminton/data.csv'
df = pd.read_csv(path)
df.head()

"""## Exploratory Data Analysis"""

df.shape

df.columns

df.info()

df.isnull().sum().sort_values(ascending=False)

df_dropna = df.dropna()
df_dropna.info()

numerical_features = list(df_dropna.select_dtypes(include=['number']).columns)
categorical_features = list(df_dropna.select_dtypes(include=['object']).columns)

print(f"The numerical features are :: {numerical_features}")
print(f"The categorical features are :: {categorical_features}")

discrete_df = df_dropna.select_dtypes(include=['object'])

numerical_df = df_dropna.select_dtypes(include=['int64', 'float64'])

numerical_df.describe().T

copy_df = df_dropna
copy_df.head()
copy_df.shape

rating_counts = copy_df['Ratings'].value_counts()

rating_counts_sorted = rating_counts.sort_index()

plt.figure(figsize=(8, 4))
bars = plt.bar(rating_counts_sorted.index, rating_counts_sorted.values, color=['blue', 'green', 'red', 'orange'])
plt.title('Number of Ratings for Each Rating Value')
plt.xlabel('Rating')
plt.ylabel('Number of Ratings')

for bar in bars:
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), str(int(bar.get_height())), ha='center', va='bottom')

plt.show()

top_10_months = copy_df['Month'].value_counts().nlargest(10)
print(top_10_months)

# top_10_months = copy_df['Month'].value_counts().nlargest(10)

# Create a bar chart
plt.figure(figsize=(8, 6))
top_10_months.plot(kind='bar', color='skyblue')
plt.xlabel('Month')
plt.ylabel('Number of Ratings')
plt.title('Top 10 Months with Most Ratings')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""## Data Prepocessing"""

# required imports

import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

# Download NLTK resources (if not already downloaded)
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

def preprocess_text(text):
    # Remove special characters, punctuation, emojis, and digits
    text = re.sub(r'[^\w\s]|(\d+)|[^\x00-\x7F]+', '', text)

    # Tokenization
    tokens = word_tokenize(text)

    # Lowercasing
    tokens = [word.lower() for word in tokens]

    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]

    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]

    # Join tokens back into text
    preprocessed_text = ' '.join(tokens)
    return preprocessed_text

# Convert 'Review text' column to string type
copy_df['Review text'] = copy_df['Review text'].astype(str)

# Apply text preprocessing to the 'Review text' column
copy_df['Cleaned Text'] = copy_df['Review text'].apply(preprocess_text)

# Print the DataFrame with cleaned text
print("DataFrame with Cleaned Text:")
print(copy_df[['Review text', 'Cleaned Text']])

copy_df.head()

from wordcloud import WordCloud

# Step: Explore the most common words or phrases in the reviews using a word cloud
all_reviews = ' '.join(copy_df['Cleaned Text'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_reviews)
plt.figure(figsize=(10, 8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Reviews')
plt.show()

# create a sentiment column based on ratings
copy_df['sentiment'] = ['negative' if r <= 2 else ('positive' if r >= 4 else 'neutral') for r in copy_df['Ratings']]

copy_df.head()

"""# Creating our machine learning model"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(copy_df['Cleaned Text'].values)
X = X.toarray()
y = copy_df['sentiment'].values

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Naive Bayes classifier
clf = MultinomialNB()
clf.fit(X_train, y_train)

# Print training and testing accuracy
print("Training Accuracy:", clf.score(X_train, y_train))
print("Testing Accuracy:", clf.score(X_test, y_test))

# Model evaluation (F1-score)
predictions = clf.predict(X_test)
f1 = f1_score(y_test, predictions, average='weighted')
print("F1-Score:", f1)

# Predict sentiment for a new review (example)
new_review = "The product is ok."
new_review_features = vectorizer.transform([preprocess_text(new_review)]).toarray()
prediction = clf.predict(new_review_features)[0]
print("Predicted Sentiment for new review:", prediction)

"""## Saving the model"""

import joblib

colab_path = f'/content/drive/MyDrive/Colab Notebooks/data/reviews_badminton/'

try:
  with open(f'{colab_path}model.pkl', 'wb') as f:
    joblib.dump(clf, f)
    print("Model saved")
except Exception as e:
  print("Error saving model..", e)

